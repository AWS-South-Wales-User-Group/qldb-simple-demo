service: qldb-streams-dynamodb

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  tracing:
    apiGateway: true
    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED	: "1"
    TABLE_NAME: BicycleLicence-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

functions:
  streamHandler:
    name: qldb-streams-dynamodb-${self:provider.stage}
    handler: functions/qldb-streams-dynamodb.handler
    events:
      - stream:
          type: kinesis
          batchSize: 1
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 10
          enabled: true
          arn:
            Fn::GetAtt: [licenceQldbStreamsDynamodb, Arn]
    iamRoleStatementsName: qldb-streams-dynamodb-lambda-role-${self:provider.stage}
    iamRoleStatements: # Grant privilege read from Kinesis work stream 
      - Effect: Allow 
        Action: 
          - kinesis:GetRecords 
          - kinesis:GetShardIterator 
          - kinesis:DescribeStream 
          - kinesis:ListStreams 
          - kinesis:PutRecord 
          - kinesis:PutRecords 
        Resource: 
          Fn::GetAtt: [licenceQldbStreamsDynamodb, Arn]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: 
          Fn::GetAtt: [bicycleLicenceLedgerTable, Arn]
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource: "*" # Restrict resource to minimum required
  

resources:
  Resources:
    licenceQldbStreamsDynamodb: 
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: QLDBBicycleLicence-dynamodb-${self:provider.stage}
        ShardCount: 1
    StreamHandlerLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig:
          Mode: "Active"
    bicycleLicenceLedgerTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete # Use 'Retain' if sls deploy should not delete the table
      Properties:
        TableName: BicycleLicence-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: "pk"
            AttributeType: S
        KeySchema:
          - AttributeName: "pk"
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
