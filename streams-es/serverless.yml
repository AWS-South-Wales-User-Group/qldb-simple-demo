service: qldb-streams-es
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  stackName: ${self:service}
  lambdaHashingVersion: "20201221"
  tracing:
    apiGateway: true
    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED	: "1"


plugins:
  - serverless-iam-roles-per-function
  - serverless-cloudformation-sub-variables
  - serverless-esbuild

functions:

  # function to consume data records from Kinesis and write to OpenSearch
  streamHandler:
    name: qldb-streams-es-${self:provider.stage}
    handler: functions/qldb-streams-es.handler
    environment:
      ELASTICSEARCH_DOMAIN: !GetAtt OpenSearch.DomainEndpoint
      REGION: "eu-west-1"
    events:
      - stream:
          type: kinesis
          batchSize: 1
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 10
          enabled: true
          arn: !GetAtt licenceQldbStreamsES.Arn
    iamRoleStatementsName: qldb-streams-es-lambda-role-${self:provider.stage}
    iamRoleStatements: # Grant privilege read from Kinesis work stream 
      - Effect: Allow 
        Action: 
          - kinesis:GetRecords 
          - kinesis:GetShardIterator 
          - kinesis:DescribeStream 
          - kinesis:ListStreams 
          - kinesis:PutRecord 
          - kinesis:PutRecords 
        Resource: 
          - !GetAtt licenceQldbStreamsES.Arn
      - Effect: Allow
        Action:
          - es:ESHttpPost
          - es:ESHttpPut
          - es:ESHttpDelete
          - es:ESHttpGet
        Resource: 
          - !GetAtt OpenSearch.Arn
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource: "*" # Restrict resource to minimum required

resources:
  Resources:

    # Cognito User Pool for the user directory to control access to OpenSearch Dashboards
    OSUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        UserPoolName: !Sub qldb-demo-user-pool
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true

    # 
    OSUserPoolDomain: 
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: !Ref OSUserPool 
        Domain: "qldb-opensearch-demo"

    OSUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub ${AWS::StackName}-client
        GenerateSecret: false
        UserPoolId: !Ref OSUserPool

    # Creates a federated Identity pool
    OSIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: qldb-demo-identity-pool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId: !Ref OSUserPoolClient
            ProviderName: !GetAtt OSUserPool.ProviderName

    # Create a role for unauthorized acces to AWS resources. Currently no access. Only allows users in the previously created Identity Pool
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud": !Ref OSIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated


    # Create a role for authorized acces to AWS resources. This only allows access to the OpenSearch domain
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud": !Ref OSIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "es:ESHttp*"
                  Resource: "arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*"


    # Assigns the roles to the Identity Pool
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId: !Ref OSIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthorizedRole.Arn
          unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

    OSCognitoRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'CognitoAccessForAmazonOpenSearch'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - es.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: "/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess

    OpenSearch:
      Type: AWS::OpenSearchService::Domain
      Properties:
        DomainName: "#{AWS::StackName}"
        EngineVersion: 'OpenSearch_1.0'
        ClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          InstanceType: 't3.medium.search'
          ZoneAwarenessEnabled: false
        CognitoOptions:
          Enabled: true
          IdentityPoolId: !Ref OSIdentityPool
          RoleArn: !GetAtt OSCognitoRole.Arn
          UserPoolId: !Ref OSUserPool
        EBSOptions:
          EBSEnabled: true
          VolumeType: 'gp2'
          Iops: 0
          VolumeSize: 10
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: 
                  - !GetAtt CognitoUnAuthorizedRole.Arn
              Action: es:ESHttp*
              Resource: arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*
            - Effect: Allow
              Principal:
                  AWS: "*"
              Action: es:ESHttp*
              Resource: arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*
              Condition:
                "StringLike":
                  "aws:PrincipalArn": arn:aws:iam::#{AWS::AccountId}:role/qldb-streams-es-lambda-role-${self:provider.stage}



    licenceQldbStreamsES:
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: QLDBBicycleLicence-es-${self:provider.stage}
        ShardCount: 1

    StreamHandlerLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig:
          Mode: "Active"

    QLDBStreamRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - qldb.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - !Ref QLDBStreamManagedPolicy

    QLDBStreamManagedPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: QLDBStreamKinesisESPermissions
              Effect: Allow
              Action:
                - 'kinesis:PutRecord*'
                - 'kinesis:DescribeStream'
                - 'kinesis:ListShards'
              Resource: 
                Fn::GetAtt: [licenceQldbStreamsES, Arn]

    ESQLDBStream:
      Type: AWS::QLDB::Stream
      Properties: 
        InclusiveStartTime: "2020-05-29T00:00:00Z"
        KinesisConfiguration: 
          AggregationEnabled: true
          StreamArn:
            Fn::GetAtt: [licenceQldbStreamsES, Arn]
        LedgerName: qldb-simple-demo-dev
        RoleArn: 
          Fn::GetAtt: [QLDBStreamRole, Arn]
        StreamName: QLDBStream-elastic-${self:provider.stage}

  Outputs:
    UserPoolId:
      Value: !Ref OSUserPool
      Export:
        Name: "UserPool::Id"
    UserPoolClientId:
      Value: !Ref OSUserPoolClient
      Export:
        Name: "UserPoolClient::Id"
    UserPoolURL:
      Value: !GetAtt OSUserPool.ProviderURL
      Export:
        Name: "UserPool::ProviderURL"
    IdentityPoolId:
      Value: !Ref OSIdentityPool
      Export:
        Name: "IdentityPool::Id"            