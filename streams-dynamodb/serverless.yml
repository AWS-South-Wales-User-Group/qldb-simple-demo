service: qldb-streams-dynamodb
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  lambdaHashingVersion: "20201221"
  tracing:
    apiGateway: true
    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED	: "1"
    TABLE_NAME: QLDBBicycleLicence-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-esbuild

functions:
  streamHandler:
    name: qldb-streams-dynamodb-${self:provider.stage}
    handler: functions/qldb-streams-dynamodb.handler
    iamRoleStatementsName: qldb-streams-dynamodb-lambda-role-${self:provider.stage}
    iamRoleStatements: # Grant privilege read from Kinesis work stream 
      - Effect: Allow 
        Action: 
          - kinesis:GetRecords 
          - kinesis:GetShardIterator 
          - kinesis:DescribeStream 
          - kinesis:ListStreams 
          - kinesis:PutRecord 
          - kinesis:PutRecords 
        Resource: 
          Fn::GetAtt: [LicenceQldbStreamsDynamodb, Arn]
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: 
          Fn::GetAtt: [BicycleLicenceLedgerTable, Arn]
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "sqs:SendMessage"
        Resource:
          Fn::GetAtt: [StreamsFailureQueue, Arn]
    

resources:
  Resources:

    LicenceQldbStreamsDynamodb: 
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: QLDBBicycleLicence-dynamodb-${self:provider.stage}
        ShardCount: 1
    
    StreamHandlerLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig:
          Mode: "Active"
    
    BicycleLicenceLedgerTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: QLDBBicycleLicence-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: "pk"
            AttributeType: S
        KeySchema:
          - AttributeName: "pk"
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StreamsFailureQueue:
      Type: AWS::SQS::Queue 

    QldbStreamRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - qldb.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: QLDBBicycleLicence-dynamodb-policy-${self:provider.stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'kinesis:PutRecord**'
                    - 'kinesis:DescribeStream'
                    - 'kinesis:ListShards'
                  Resource:
                    Fn::GetAtt: [LicenceQldbStreamsDynamodb, Arn]
        RoleName: QLDBBicycleLicence-dynamodb-role-${self:provider.stage}

    MyQLDBStream:
      Type: "AWS::QLDB::Stream"
      DependsOn: QldbStreamRole
      Properties:
        InclusiveStartTime: "2020-05-29T00:00:00Z"
        KinesisConfiguration:
          AggregationEnabled: true
          StreamArn: 
            Fn::GetAtt: [LicenceQldbStreamsDynamodb, Arn]
        LedgerName: !ImportValue qldb-simple-demo
        RoleArn: 
          Fn::GetAtt: [QldbStreamRole, Arn]
        StreamName: QLDBBicycleLicence-dynamodb-${self:provider.stage}
        Tags:
          - Key: name
            Value: qldb-simple-demo

    MyEventSourceMapping:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        BatchSize: 50
        BisectBatchOnFunctionError: true
        DestinationConfig: 
          OnFailure: 
            Destination: !GetAtt StreamsFailureQueue.Arn
        Enabled: true
        EventSourceArn: !GetAtt LicenceQldbStreamsDynamodb.Arn
        FunctionName: !GetAtt StreamHandlerLambdaFunction.Arn
        MaximumRetryAttempts: 1
        StartingPosition: "TRIM_HORIZON"