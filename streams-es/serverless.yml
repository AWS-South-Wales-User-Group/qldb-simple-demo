service: qldb-streams-es
framework: '2'

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  stackName: ${self:service}
  tracing:
    apiGateway: true
    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED	: "1"

plugins:
  - serverless-iam-roles-per-function
  - serverless-cloudformation-sub-variables
  - serverless-esbuild

functions:
  streamHandler:
    name: qldb-streams-es-${self:provider.stage}
    handler: functions/qldb-streams-es.handler
    environment:
      ELASTICSEARCH_DOMAIN: !GetAtt OpenSearch.DomainEndpoint
      REGION: "eu-west-1"
    events:
      - stream:
          type: kinesis
          batchSize: 1
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 10
          enabled: true
          arn: !GetAtt licenceQldbStreamsES.Arn
#    vpc:
 #     securityGroupIds:
  #      - !GetAtt ElasticSecurityGroup.GroupId
   #   subnetIds:
    #    - Ref: ElasticSubnetA
    iamRoleStatementsName: qldb-streams-es-lambda-role-${self:provider.stage}
    iamRoleStatements: # Grant privilege read from Kinesis work stream 
      - Effect: Allow 
        Action: 
          - kinesis:GetRecords 
          - kinesis:GetShardIterator 
          - kinesis:DescribeStream 
          - kinesis:ListStreams 
          - kinesis:PutRecord 
          - kinesis:PutRecords 
        Resource: 
          - !GetAtt licenceQldbStreamsES.Arn
      - Effect: Allow
        Action:
          - es:ESHttpPost
          - es:ESHttpPut
          - es:ESHttpDelete
          - es:ESHttpGet
        Resource: 
          - !GetAtt OpenSearch.Arn
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource: "*" # Restrict resource to minimum required

resources:
  Resources:

    OSUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        UserPoolName: !Sub qldb-demo-user-pool
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true

    OSUserPoolDomain: 
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: !Ref OSUserPool 
        Domain: "qldb-opensearch-demo"

    OSUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub ${AWS::StackName}-client
        # GenerateSecret: false
        UserPoolId: !Ref OSUserPool

    OSIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId: !Ref OSUserPoolClient
            ProviderName: !GetAtt OSUserPool.ProviderName

    OSCognitoRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'CognitoAccessForAmazonOpenSearch'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - es.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: "/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess


    OpenSearch:
      Type: AWS::OpenSearchService::Domain
      Properties:
        DomainName: "#{AWS::StackName}"
        EngineVersion: 'OpenSearch_1.0'
        ClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          InstanceType: 't3.medium.search'
          ZoneAwarenessEnabled: false
        CognitoOptions:
          Enabled: true
          IdentityPoolId: !Ref OSIdentityPool
          RoleArn: !GetAtt OSCognitoRole.Arn
          UserPoolId: !Ref OSUserPool
        EBSOptions:
          EBSEnabled: true
          VolumeType: 'gp2'
          Iops: 0
          VolumeSize: 10
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                AWS: "*"
              Action: es:ESHttp*
              Resource: arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*
#        VPCOptions: 
 #         SecurityGroupIds: 
  #          - !Ref ElasticSecurityGroup
   #       SubnetIds: 
    #        - !Ref ElasticSubnetA 
        LogPublishingOptions:
          ES_APPLICATION_LOGS:
              CloudWatchLogsLogGroupArn: 'arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:/aws/opensearch/domains/opensearch-application-logs'
              Enabled: true
          SEARCH_SLOW_LOGS:
              CloudWatchLogsLogGroupArn: 'arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:/aws/opensearch/domains/opensearch-slow-logs'
              Enabled: true
          INDEX_SLOW_LOGS:
              CloudWatchLogsLogGroupArn: 'arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:/aws/opensearch/domains/opensearch-index-slow-logs'
              Enabled: true
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: true
          override_main_response_version: true


#        EncryptionAtRestOptions:
#          Enabled: true
#          KmsKeyId: arn:aws:kms:${self:provider.region}:#{AWS::AccountId}:alias/aws/es
#        NodeToNodeEncryptionOptions:
#          Enabled: true
#        DomainEndpointOptions:
#          EnforceHTTPS: true


    OSVPCRole:
      Type: 'AWS::IAM::Role'
      Properties:
        Description: 'Service linked role to setup VPC connectivity'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - es.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - !Ref OSVPCManagedPolicy

    OSVPCManagedPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        Description: 'Permissions to setup VPC connectivity'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: ElasticVPCPermissions
              Effect: Allow
              Action:
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:ModifyNetworkInterfaceAttribute'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeVpcs'
              Resource: "*"

#    ElasticVPC:
 #     Type: AWS::EC2::VPC
  #    Properties:
   #     CidrBlock: "10.0.0.0/16"
    #    EnableDnsSupport: true
     #   EnableDnsHostnames: true
      #  Tags:
       #   - Key: Name
        #    Value: qldb-streams-elastic

#    ElasticSubnetA:
 #     DependsOn: ElasticVPC
  #    Type: AWS::EC2::Subnet
   #   Properties:
    #    VpcId:
     #     Ref: ElasticVPC
      #  AvailabilityZone: ${self:provider.region}a
       # CidrBlock: "10.0.2.0/24"
        #Tags:
         # - Key: Name
          #  Value: qldb-streams-es-a
        
#    ElasticSecurityGroup:
 #     DependsOn: ElasticVPC
  #    Type: AWS::EC2::SecurityGroup
   #   Properties:
    #    GroupDescription: SecurityGroup for Elasticsearch
     #   VpcId:
      #    Ref: ElasticVPC
       # SecurityGroupIngress: 
        #  - FromPort: 443
         #   IpProtocol: tcp 
          #  ToPort: 443
           # CidrIp: 0.0.0.0/0
        #Tags:
         # - Key: Name
          #  Value: qldb-streams-es-sg

    licenceQldbStreamsES:
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: QLDBBicycleLicence-es-${self:provider.stage}
        ShardCount: 1

    StreamHandlerLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig:
          Mode: "Active"

    QLDBStreamRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - qldb.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - !Ref QLDBStreamManagedPolicy

    QLDBStreamManagedPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: QLDBStreamKinesisESPermissions
              Effect: Allow
              Action:
                - 'kinesis:PutRecord*'
                - 'kinesis:DescribeStream'
                - 'kinesis:ListShards'
              Resource: 
                Fn::GetAtt: [licenceQldbStreamsES, Arn]

    ESQLDBStream:
      Type: AWS::QLDB::Stream
      Properties: 
        InclusiveStartTime: "2020-05-29T00:00:00Z"
        KinesisConfiguration: 
          AggregationEnabled: true
          StreamArn:
            Fn::GetAtt: [licenceQldbStreamsES, Arn]
        LedgerName: qldb-simple-demo-dev
        RoleArn: 
          Fn::GetAtt: [QLDBStreamRole, Arn]
        StreamName: QLDBStream-elastic-${self:provider.stage}

Outputs:
  ESDomainArn: 
    Value: !GetAtt AWS::OpenSearchService::Domain.Arn
    Export:
      Name: "#{AWS::StackName}:${self:provider.stage}:OpenSearchService:Domain.Arn"
  ESDomainEndpoint: 
    Value: !GetAtt AWS::OpenSearchService::Domain.DomainEndpoint 
    Export:
      Name: "#{AWS::StackName}:${self:provider.stage}:OpenSearchService:Domain.DomainEndpoint"
            